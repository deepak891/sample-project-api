BaseTest

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "classpath:application.xml")
public abstract class BaseTest implements TestConstants {

  private static final String APPLICATION_JSON_UTF8 = "application/json; charset=UTF-8";
  private static boolean isDbPopulated = false;

  protected static int stockCount;
  protected static int orderCount;

  protected MockMvc mockMvc;
  protected ObjectMapper mapper = new ObjectMapper();

  @Autowired protected StockDao stockDao;
  @Autowired protected OrderDao orderDao;

  @Autowired
  private DataSource h2DataSource;

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  protected static MockMvc initializeMockMvcSuccess(Object controller) {
      return standaloneSetup(controller)
              .alwaysExpect(status().isOk())
              .alwaysExpect(content().contentType(APPLICATION_JSON_UTF8))
              .alwaysExpect(jsonPath(JsonPaths.RESULT, equalTo(true)))
              .alwaysExpect(jsonPath(JsonPaths.STATUS_CODE, equalTo(HttpURLConnection.HTTP_OK)))
              .build();
  }

  protected static MockMvc initializeMockMvcFail(Object controller) {
      return standaloneSetup(controller)
              .alwaysExpect(status().isOk())
              .alwaysExpect(content().contentType(APPLICATION_JSON_UTF8))
              .alwaysExpect(jsonPath(JsonPaths.RESULT, equalTo(false)))
              .build();
  }

  protected void populateDB() {
      if (!isDbPopulated) {
          ResourceDatabasePopulator rdp = new ResourceDatabasePopulator();
          rdp.addScript(new ClassPathResource("sql/stock.sql"));
          rdp.addScript(new ClassPathResource("sql/order.sql"));
          makeConnection(rdp);
          fillFields();
          isDbPopulated = true;
      }
  }

  private void fillFields() {
    stockCount = stockDao.findAll().size();
    orderCount = orderDao.findAll().size();
  }

  private void makeConnection(ResourceDatabasePopulator rdp) {
    try {
        Connection connection = h2DataSource.getConnection();
        rdp.populate(connection);
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
  }

  TestConstant
  interface TestConstants {

    String ASC = SqlOrder.asc.name();
    String DESC = SqlOrder.desc.name();

    String DEF_PAGE_INDEX_ALG1 = "0";
    String DEF_PAGE_INDEX_ALG2 = "1";
    String DEF_PAGE_SIZE = "10";

    Integer INT_ID1 = 1;

    Long LONG_ID1 = 1L;
    Long LONG_ID2 = 2L;
    String TEST = "TEST";
    String TEST_KEY = "Test key";

    String ERROR_RESPONSE_MSG = "errorResponseMessage";

    interface Actions {

        String DELETE = "delete";
        String EDIT = "edit";

    }

    interface EntityFields {

        String DELETED = "deleted";
        String ID = "id";
        String KEY = "key";
        String LABEL = "label";
    }

    interface Parameters {

        String ACTION = "action";
        String CKS_CODE = "cksCode";
        String CATALOG = "catalog";
    }

    interface Paths {

      String FAMILIES = "/families";
      String FEATURES = "/features";
    }
    interface JsonPaths {

      String DATA = "data";
      String DATA_ERRORS = "data.errors";
      String DATA_ERRORS_FIRST = "data.errors.error[0]";
      String DATA_ERRORS_ID = "data.errors.errorId";
      String DATA_FIRST = "data[0]";
      String DATA_LENGTH = "data.length()";
      String DATA_STATUS = "data.status";
      String DETAILS = "data.details";
      String DETAILS_FIRST = "data.details[0]";
      String COUNT = "data.count";
      String ORDER = "data.order";
      String ORDER_NAME = "data.orderName";
    }

    interface Statuses {

      String CREATED_NAME = ApprovedStatus.Created.name();
      String ACTIVE_NAME = ApprovedStatus.Active.name();
      String ARCHIVE_NAME = ApprovedStatus.Archive.name();
      String PENDING_NAME = ApprovedStatus.Pending.name();
    }

    
